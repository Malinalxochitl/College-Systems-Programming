#define _XOPEN_SOURCE 700 
#include <stdlib.h>
#include <unistd.h>
#include <ftw.h>
#include <time.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <ctype.h>
#include "I-mine.h"

/*void print(){
	node* ptr;
	for(ptr = List; ptr != NULL; ptr = ptr->next){
		printf("WORD: %s\n", ptr->word);
	}
	printf("END\n");
	int i;
	for(i = 0; i<BUCKETSIZE; i++){
		if(Table[i] != NULL){
			HashNode* p;
			for(p = Table[i]; p != NULL; p = p->next){
				printf("WORD: %s\n", p->word);
				fileNode* ptr;
				for(ptr = (p->fileList); ptr != NULL; ptr = ptr->next){
					printf("\tFILE: %s COUNT: %d\n", ptr->fileName, ptr->count[0]);
				}
			}
		}
	}
}*/

int main(int argc, char** argv){
	if(argc != 3){
		printf("This program requires two inputs\n");
		return 0;
	}
	if(file_exist(argv[1])){
		char * answer = (char*) malloc(100);
		printf("The file we need to write to already exists. Would you like to overwrite it? yes or no\n");
		while(1){
			scanf("%s", answer);
			if(strcmp(answer ,"yes") == 0){
				printf("Alrighty then. Program continuing :)\n");
				break;
			}
			else if(strcmp(answer, "no") == 0){
				printf("Program terminating then :(\n");
				return 0;
			}
			else{
				printf("Please type is yes or no EXACTLY. Would you like to overwrite the file?\n");
			}
			
		}
	}
	int i;
	for(i = 0; i<BUCKETSIZE; i++){
		Table[i] = NULL;
	}
	List = NULL;
		
	int fd_limit = 15;
	int flags = FTW_DEPTH | FTW_MOUNT;
	int ret;
	char* startpath = argv[2];
	ret = nftw(startpath, f, fd_limit,  flags);
	if(ret == -1) {
		fprintf(stderr, "Error trying to index %s. Terminating program.\n", startpath);
		return 0;
	}
	fileprint(argv[1]);
	return 0;
}

node* createNode(char* word) {
	node* A = (node*) malloc(sizeof(node));
	A->word = (char*) malloc(strlen(word)+1);    // creates node for linked list
	strcpy(A->word, word);
	A->next = NULL;
	return A;
}

fileNode* CreateFileNode(const char* fileName){
	fileNode* returnValue = (fileNode*) malloc(sizeof(fileNode));    
	returnValue->count = (int*) malloc(sizeof(int));                
	returnValue->count[0] = 1;				       
	returnValue->next = NULL;                                     // creates a fileNode
	returnValue->fileName = (char*) malloc(strlen(fileName)+1);
	strcpy(returnValue->fileName, fileName);
	return returnValue;
}

HashNode* CreateHashNode(const char* word, const char* file){
	HashNode* returnValue = (HashNode*) (malloc(sizeof(HashNode)));
	returnValue->word = (char*) (malloc(strlen(word)+1));           // creates a node for Hash table;
	(returnValue-> fileList) = CreateFileNode(file);
	returnValue->next = NULL;
	strcpy(returnValue->word, word);
	return returnValue;
}

int hash(char* word){
	int l = strlen(word);
	unsigned int R = 0;                          // hash function. Sums ASCII values(need to change!)
	int i;
	for(i = 0; i<l; i++){
		R+=((int) word[i]+31*R)%BUCKETSIZE;
	}
	return R % BUCKETSIZE; // add real hash function
}

void swapI(int* a, int* b){
	int temp = *a;
	*a = *b;                // swaps int pointers
	*b = temp;
}

void AddtoFlist(HashNode* F, const char* file){
	fileNode* files = F->fileList;
	if(files->next == NULL){
		if(strcmp(files->fileName, file) == 0){
			files->count[0]++;
			return;
		} 
		fileNode* newNode = CreateFileNode(file);
		if(files->count[0] > 1){
			files->next = newNode;
			return;                                      // adds to the file list
		}
		else if(strcmp(files->fileName, file) < 0){
			files->next = newNode;
			return;
		}
		else{
			newNode->next = files;
			F->fileList = newNode;
			return;
		}
	}
	fileNode* ptr, *end;
	end = files;
	for(ptr = files->next; ptr != NULL; ptr = ptr->next){
		if(strcmp(ptr->fileName, file) == 0){
			ptr->count[0]++;
			if((end->count[0] < ptr->count[0]) || ((end->count[0] == ptr->count[0]) && (strcmp(end->fileName, ptr->fileName) >0)))
	{
				int l1 = strlen(ptr->fileName);
				int l2 = strlen(end->fileName);
				char* temp = (char*) malloc(l1+1);
				strcpy(temp, ptr->fileName);                    // swaps the entries in the nodes
				ptr->fileName = (char*) malloc(l2+1);
				strcpy(ptr->fileName, end->fileName);
				end->fileName = (char*) malloc(l1+1);
				strcpy(end->fileName, temp);
				swapI(end->count, ptr->count);
				free(temp);
			}
			return;
		}
		end = ptr;
	}
	end->next = CreateFileNode(file);
	 
}

int AddtoHash(char* word, const char* file){                   // add alphabetical sorting, real hash function, ordered adding(by occurence)
	int place = hash(word);
	if(Table[place] == NULL){
		Table[place] = CreateHashNode(word, file);
		return 0;
	}
	HashNode* ptr, *ptr2;
	ptr2 = Table[place];
	for(ptr = Table[place]; ptr != NULL; ptr = ptr->next){
		if(strcmp(ptr->word, word) == 0){
			AddtoFlist(ptr, file);
			return 1;                              // returns 1 if already present, 0 otherwise
		}
		ptr2 = ptr;
	}
	HashNode* newNode = CreateHashNode(word, file);
	ptr2->next = newNode;
	return 0;
}

void AddtoList(char* word){
	if(List == NULL){
		List = createNode(word);
	}
	node* ptr; node* newNode = createNode(word);
	if(strcmp(List->word, word) > 0){
		newNode->next = List;
		List = newNode;
		return;
	}
	if(strcmp(List->word, word) == 0){
		return;
	}
	node* ptr2 = List;
	for(ptr = List->next; ptr!= NULL; ptr = ptr->next){
		if(strcmp(ptr->word,word) > 0){
			ptr2->next = newNode;                       // adds word to the list of words
			newNode->next = ptr;
			return;
		}
		if(strcmp(ptr->word, word) == 0){
			return;
		}
		ptr2 = ptr;
	}
	ptr2->next = newNode;
}

void fileprint(char* file){
	FILE* fp = fopen(file, "w");
	fprintf(fp, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
	fprintf(fp, "<fileIndex>\n");
	node* ptr;
	for(ptr = List; ptr != NULL; ptr = ptr->next){
		fprintf(fp, "<word text=\"%s\"\n", ptr->word);
		HashNode* Q, *P;
		for(Q = Table[hash(ptr->word)]; Q!=NULL; Q = Q->next){
			P = Q;
			if(strcmp(Q->word, ptr->word) == 0){
				break;                                  // prints indexer into file
			}
		}
		fileNode* p;
		for(p = P->fileList; p!=NULL; p = p->next){
			fprintf(fp, "\t<file name=\"%s\">%d</file>\n", p->fileName, p->count[0]);
		}
		fprintf(fp, "</word>\n");
	}
	fprintf(fp, "</fileIndex>");
	fclose(fp);
	                                                                                            
}

int f(const char* F, const struct stat* B, int C, struct FTW* D){
	if(C != FTW_F){
		return 0;
	}
	int i; int L = 0;
	for(i = strlen(F)-1; i>=0 ; i--){
		if(F[i] == '/'){
			break;
		}
		L++;
	}
	char* A = (char*) malloc(L+1);
	for(i = 0; i<L; i++){
			A[i] = F[strlen(F)-L+i];
	}
	A[L] = '\0';
	FILE* fp = fopen(F, "r");                                // reads and hashes words in each file
	while(!feof(fp)){
		char c[5000];
		if(fscanf(fp, "%5000s", c) != 1){break;}
		int l = strlen(c); int start = 0;
		for(i = 0; i<l; i++){
			int isalpha = isalpha(c[i]);
			int isalnum = isalnum(c[i]);
			if(isalpha){
				start = 1;
			}
			else if(!isalnum || (!isalpha && !start)){
				c[i] = 32;
				start = 0;
			}
			
			
		}
		char* p = strtok(c, " ");
		while(p != NULL){
			for(i = 0; i<strlen(p); i++){
				p[i] = tolower(p[i]);
			}
			if(!AddtoHash(p, A)){
				AddtoList(p);
			}
			p = strtok(NULL, " ");
		}
	}
	fclose(fp);
	return 0;
}